# for run
# uvicorn fastapiTest:app --reload
# uvicorn fastapiTest:app --port 3000
# https://requests.readthedocs.io/en/latest/
# sys.getrefcount(object) // return links(refs) on object

from fastapi import FastAPI, Response, Request
from fastapi.responses import HTMLResponse
from fastapi.responses import RedirectResponse
from fastapi.templating import Jinja2Templates
import time, threading
import requests
import test
from threading import Thread, Timer
import asyncio


app = FastAPI()

items = [1, 2, 3, 'aaa', 'bbb', 'ccc']


templates = Jinja2Templates(directory="html")

def hello(data):
    print('Hello World after timeout', data)

@app.get("/data")
async def root():
    return items


@app.get("/html-custom", response_class=HTMLResponse)
async def read_items():
    return """
    <html>
        <head>
            <title>Python TestServer Page</title>
        </head>
        <body>
            <h1>Python TestServer Page</h1>
        </body>
    </html>
    """

# response_status = 307 Temporary redirect
@app.get("/redirect", response_class=RedirectResponse)
async def redirect_fastapi():
    return "http://localhost:3000/html"

@app.get('/html')
def htmlTemplate(request: Request):
    # test.foo('123')
    return templates.TemplateResponse("index.html", {"request": request})


@app.get('/api')
def api_data(request: Request):
    response = requests.get('http://localhost:3000/data')
    data = response.json()

    def testtimer():
        print('print test')
        return data

    t = Timer(10.0, testtimer)
    t.start()  # after 30 seconds, "hello, world" will be printed
    # await asyncio.sleep(5)
    return data

# print('globals', globals()) // All global variables
# print('locals', locals()) // All local variables
